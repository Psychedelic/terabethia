functions:  
  # grab messages from the IC and put them into FIFO StarknetQueue
  StarknetPollMessages:
    timeout: 30
    memorySize: 128
    handler: src/functions/sync/poll.main
    environment:
      # Operator key pair that's allowed to get and remove messages from Terabethia Canister
      IC_PRIVATE_KEY: ${ssm:${self:custom.resourcePrefix}ICPrivateKey~true}
      IC_CANISTER_ID: ${ssm:${self:custom.resourcePrefix}ICCanisterId~true}
      QUEUE_URL: !Ref StarknetMessagesQueue
      STARKNET_TABLE_NAME: !Ref StarknetTable
    events:
      # we poll messages every minute
      - schedule: rate(1 minute)
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
            - "sqs:SendMessageBatch"
        Resource:
          - !GetAtt
            - StarknetMessagesQueue
            - Arn

  # send messages to L1 through Starknet
  StarknetSendMessages:
    timeout: 60
    memorySize: 258
    reservedConcurrency: 1
    handler: src/functions/sync/send.main
    environment:
      # Terabethia Account
      STARKNET_ACCOUNT_ADDRESS: ${ssm:${self:custom.resourcePrefix}StarknetAccount}
      # Terabethia Starknet Contract
      STARKNET_CONTRACT_ADDRESS: ${ssm:${self:custom.resourcePrefix}StarknetContract}
      # Terabethia Signer Private Key (with access to Account)
      STARKNET_PRIVATE_KEY: ${ssm:${self:custom.resourcePrefix}StarknetPrivateKey~true}
      QUEUE_URL: !Ref StarknetMessagesQueue
      # when transaction is submitted, we need to check for acceptance
      CHECK_QUEUE_URL: !Ref StarknetTransactionsQueue
      STARKNET_TABLE_NAME: !Ref StarknetTable
    events:
      - sqs:
          batchSize: 10
          maximumRetryAttempts: 3
          arn:
            Fn::GetAtt:
              - StarknetMessagesQueue
              - Arn
    iamRoleStatements:
      - Effect: "Allow"
        Action:
            - "sqs:SendMessage"
        Resource:
          - !GetAtt
            - StarknetTransactionsQueue
            - Arn

resources:
  Resources:
    # Messages from the Terabethia canister are polled into this queue
    StarknetMessagesQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.resourcePrefix}StarknetMessages.fifo
        ContentBasedDeduplication: true
        FifoQueue: true
        VisibilityTimeout: 120 # 2 minutes
        RedrivePolicy:
          maxReceiveCount: 3
          deadLetterTargetArn: !GetAtt
            - StarknetMessagesDeadLetterQueue
            - Arn
    StarknetMessagesDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: ${self:custom.resourcePrefix}StarknetMessagesDLQ.fifo
        MessageRetentionPeriod: 1209600 # 14 days

    # Starknet transactions are queued here, so we can check if the message was accepted on L2/L1
    StarknetTransactionsQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.resourcePrefix}StarknetTransactionsQueue.fifo
        FifoQueue: true
        VisibilityTimeout: 300 # 5 minutes
        RedrivePolicy:
          maxReceiveCount: 3
          deadLetterTargetArn: !GetAtt
            - StarknetTransactionsDeadLetterQueue
            - Arn
    StarknetTransactionsDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: ${self:custom.resourcePrefix}StarknetTransactionsDLQ.fifo
        MessageRetentionPeriod: 1209600 # 14 days