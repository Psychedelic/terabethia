service:
  name: terabethia

provider:
  name: aws
  profile: terabethia
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    DEBUG: '*'
    AWS_STAGE: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    DYNAMO_LOCAL_PORT: ${self:custom.dynamodb.start.port}
custom:
  import:
    - ./serverless.starknet.yml
    - ./serverless.ethereum.yml
    - ./serverless.db.yml
  stagePrefix:
    dev: TerabethiaTestnet
    prd: TerabethiaMainnet
  resourcePrefix: ${self:custom.stagePrefix.${self:provider.stage}}
  
  # stack termination protection
  serverlessTerminationProtection:
    stages:
      - prd
      - dev
  domain:
    dev: terabethia-dev.psychedelic.ooo
    prd: terabethia.psychedelic.ooo

  # ToDo {botch} confirm domains
  # customDomain:
  #   domainName: ${self:custom.domain.${opt:stage, 'dev'}}
  #   stage: ${self:provider.stage}
  #   basePath: ''
  #   autoDomain: true
  #   certificateName: '*.psychedelic.ooo'
  #   createRoute53Record: false
  dynamodb:
    start:
      port: 8002
      inMemory: true
      migrate: true
    stages:
      - dev
  serverless-offline-sns:
    port: 4002
    debug: false
    sns-endpoint: http://127.0.0.1:4002
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-iam-roles-per-function:
    defaultInherit: true # Each function will inherit the service level roles too.
  prune:
    automatic: true
    number: 3
  serverless-offline:
    httpPort: 3000
    stageVariables:
      foo: "bar"

plugins:
  - serverless-webpack
  - serverless-stack-termination-protection
  - serverless-iam-roles-per-function
  - serverless-prune-plugin
  - serverless-dynamodb-local
  - serverless-offline-sns
  - serverless-offline
  - serverless-import-config-plugin

package:
  individually: true