service:
  name: terabethia

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    DEBUG: '*'
    QUEUE_URL: !Ref TeraQueue
    AWS_STAGE: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    DYNAMO_LOCAL_PORT: ${self:custom.dynamodb.start.port}
    ETH_L1_MESSAGE_TOPIC_NAME: ${self:custom.EthL1MessageTopic}
    SNS_URL: ${self:custom.serverless-offline-sns.sns-endpoint}
    TERA_AGENT_KEY_PAIR: "${ssm:tera-agent-identity-key-pair-dev~true}"
    ETH_L1_MESSAGE_TOPIC_ARN: { "Fn::Join" : ["", ["arn:aws:sns:${self:custom.region}:", { "Ref" : "AWS::AccountId" }, ":${self:custom.EthL1MessageTopic}" ] ]  }
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - "sqs:SendMessage"
            - "sqs:DeleteMessage"
          Resource:
            - !GetAtt
              - TeraQueue
              - Arn
        - Effect: Allow
          Action:
            - SNS:Publish
            - SNS:Subscribe
          Resource: "*"
        - Effect: 'Allow'
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource: 
            - !GetAtt 
              - TeraL1StateTable  
              - Arn

custom:
  region: ${opt:region, self:provider.region}
  EthL1MessageTopic: eth-l1-message-${self:service.name}-${self:provider.stage}-topic.fifo
  resourceSuffix: ${self:service.name}-${self:provider.stage}
  deletionPolicy:
    default: Delete
    staging: Retain
    prod: Retain
  updateReplacePolicy:
    default: Delete
    staging: Retain
    prod: Retain
  serverlessTerminationProtection:
  # sls remove --force
    stages:
      - prod
  domain:
    dev: ${self:service.name}-dev.psychedelic.ooo
    prod: ${self:service.name}.psychedelic.ooo
  # ToDo {botch} confirm domains
  # customDomain:
  #   domainName: ${self:custom.domain.${opt:stage, 'dev'}}
  #   stage: ${self:provider.stage}
  #   basePath: ''
  #   autoDomain: true
  #   certificateName: '*.psychedelic.ooo'
  #   createRoute53Record: false
  dynamodb:
    start:
      port: 8002
      inMemory: true
      migrate: true
    stages:
      - dev
  serverless-offline-sns:
    port: 4002
    debug: false
    sns-endpoint: http://127.0.0.1:4002
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-iam-roles-per-function:
    defaultInherit: true # Each function will inherit the service level roles too.
  prune:
    automatic: true
    number: 3
  serverless-offline:
    httpPort: 3000
    stageVariables:
      foo: "bar"

plugins:
  - serverless-webpack
  - serverless-stack-termination-protection
  - serverless-iam-roles-per-function
  - serverless-prune-plugin
  - serverless-dynamodb-local
  - serverless-offline-sns
  - serverless-offline

package:
  individually: true

functions:
  BlockNativeEventHook:
    timeout: 10
    memorySize: 128
    handler: src/functions/blocknative/handler.main
    environment:
      AWS_ACCOUNT_ID: ${aws:accountId}
    events:
      - http:
          method: POST
          path: /hook
  ReceiveMessageFromL1:
    timeout: 30
    memorySize: 128
    handler: src/functions/teraQueue/handler.main
    environment:
      TERA_AGENT_KEY_PAIR: ${ssm:tera-agent-identity-key-pair-dev~true}
    events:
      - sqs:
          batchSize: 10
          maximumRetryAttempts: 10
          arn:
            Fn::GetAtt:
              - TeraQueue
              - Arn
  
  # grab messages from the IC and put them into FIFO StarknetQueue
  SyncL2ToL1Messages:
    timeout: 30
    memorySize: 128
    handler: src/functions/sync/handler.main
    environment:
      OPERATOR_PRIVATE_KEY: ${ssm:terabethia-testnet-pk~true}
      CONTRACT_ADDRESS: '0x7de702C6503Bc03b5EbE00221F50Af9330ca4c16'
      TERA_AGENT_KEY_PAIR: ${ssm:tera-agent-identity-key-pair-dev~true}
      QUEUE_URL: !Ref StarknetQueue
    events:
      - schedule: rate(1 minute)
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
            - "sqs:SendMessage"
        Resource:
          - !GetAtt
            - StarknetQueue
            - Arn

  # StarknetQueue handler
  ProcessL2ToL1Messages:
    timeout: 30
    memorySize: 128
    reservedConcurrency: 1
    handler: src/functions/sync/queue.main
    environment:
      OPERATOR_PRIVATE_KEY: ${ssm:terabethia-testnet-pk~true}
      CONTRACT_ADDRESS: '0x7de702C6503Bc03b5EbE00221F50Af9330ca4c16'
      TERA_AGENT_KEY_PAIR: ${ssm:tera-agent-identity-key-pair-dev~true}
      QUEUE_URL: !Ref StarknetQueue
    events:
      - sqs:
          batchSize: 1 # todo: support batches, blocked by Cairo send_message_batch
          maximumRetryAttempts: 10
          arn:
            Fn::GetAtt:
              - StarknetQueue
              - Arn
    iamRoleStatements:
      - Effect: "Allow"
        Action:
            - "sqs:SendMessage"
        Resource:
          - !GetAtt
            - StarknetQueue
            - Arn

resources:
  - Resources:
      TeraQueue:
        Type: 'AWS::SQS::Queue'
        Properties:
          QueueName: tera-queue-${self:custom.resourceSuffix}.fifo
          ContentBasedDeduplication: true
          FifoQueue: true
          VisibilityTimeout: 300 # 5 minutes
          RedrivePolicy:
            maxReceiveCount: 5
            deadLetterTargetArn: !GetAtt
              - TeraDeadLetterQueue
              - Arn
      TeraDeadLetterQueue:
        Type: AWS::SQS::Queue
        Properties:
          FifoQueue: true
          QueueName: tera-dead-letter-queue-${self:custom.resourceSuffix}.fifo

      TeraL1StateTable:
        Type: AWS::DynamoDB::Table
        DeletionPolicy: ${self:custom.deletionPolicy.${self:provider.stage}, '${self:custom.deletionPolicy.default}'}
        UpdateReplacePolicy: ${self:custom.updateReplacePolicy.${self:provider.stage}, '${self:custom.updateReplacePolicy.default}'}
        Properties:
          TableName: tera_l1_state_${self:provider.stage}
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: pk
              AttributeType: S
            - AttributeName: sk
              AttributeType: S
          KeySchema:
            - AttributeName: pk
              KeyType: HASH
            - AttributeName: sk
              KeyType: RANGE

      EthL1MessageTopic:
        Type: AWS::SNS::Topic
        Properties:
          DisplayName: ETH L1 Message
          TopicName: ${self:custom.EthL1MessageTopic}
          ContentBasedDeduplication: true
          FifoTopic: true

      SnsToTeraQueuePolicy:
        Type: AWS::SQS::QueuePolicy
        Properties:
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "allow-sns-messages"
                Effect: Allow
                Principal: "*"
                Resource: !GetAtt
                  - TeraQueue
                  - Arn
                Action: "SQS:SendMessage"
                Condition:
                  ArnEquals:
                    "aws:SourceArn": !Ref EthL1MessageTopic
          Queues:
            - !Ref TeraQueue

      TeraQueueSubscription:
        Type: 'AWS::SNS::Subscription'
        Properties:
          TopicArn: !Ref EthL1MessageTopic
          Endpoint: !GetAtt
            - TeraQueue
            - Arn
          Protocol: sqs
          RawMessageDelivery: 'true'


      StarknetQueue:
        Type: 'AWS::SQS::Queue'
        Properties:
          QueueName: terabethia-starknet-${self:custom.resourceSuffix}.fifo
          ContentBasedDeduplication: true
          FifoQueue: true
          VisibilityTimeout: 120 # 5 minutes
          RedrivePolicy:
            maxReceiveCount: 5
            deadLetterTargetArn: !GetAtt
              - StarknetDeadLetterQueue
              - Arn
      StarknetDeadLetterQueue:
        Type: AWS::SQS::Queue
        Properties:
          FifoQueue: true
          QueueName: terabethia-starknet-dlq-${self:custom.resourceSuffix}.fifo