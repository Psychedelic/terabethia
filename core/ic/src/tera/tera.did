type CallResult = record { return : vec nat8 };
type ConsumeMessageResponse = variant { Ok : bool; Err : text };
type OutgoingMessage = record { msg_hash : text; msg_key : vec nat8 };
type OutgoingMessagePair = record { msg_hash : text; msg_key : text };
type SendMessageResponse = variant { Ok : OutgoingMessage; Err : text };
type StoreMessageResponse = variant { Ok : CallResult; Err : text };
service : {
  authorize : (principal) -> ();
  consume_message : (principal, vec nat8, vec nat) -> (ConsumeMessageResponse);
  get_messages : () -> (vec OutgoingMessagePair);
  get_nonces : () -> (vec nat) query;
  nonce_exist : (nat) -> (bool) query;
  remove_messages : (vec OutgoingMessagePair) -> (ConsumeMessageResponse);
  send_message : (principal, vec nat) -> (SendMessageResponse);
  store_message : (principal, principal, nat, vec nat) -> (
      StoreMessageResponse,
    );
  trigger_call : (principal, principal, nat, vec nat) -> (StoreMessageResponse);
}