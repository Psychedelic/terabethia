service: terabethia

provider:
  name: aws
  profile: terabethia
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    DEBUG: '*'
    AWS_STAGE: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    DYNAMO_LOCAL_PORT: ${self:custom.dynamodb.start.port}

custom:
  stagePrefix:
    dev: TerabethiaTestnet
    prd: TerabethiaMainnet

  resourcePrefix: ${self:custom.stagePrefix.${self:provider.stage}}
  
  # stack termination protection
  serverlessTerminationProtection:
    stages:
      - prd
      - dev
  domain:
    dev: terabethia-dev.psychedelic.ooo
    prd: terabethia.psychedelic.ooo

  # ToDo {botch} confirm domains
  # customDomain:
  #   domainName: ${self:custom.domain.${opt:stage, 'dev'}}
  #   stage: ${self:provider.stage}
  #   basePath: ''
  #   autoDomain: true
  #   certificateName: '*.psychedelic.ooo'
  #   createRoute53Record: false
  dynamodb:
    start:
      port: 8002
      inMemory: true
      migrate: true
    stages:
      - dev
  serverless-offline-sns:
    port: 4002
    debug: false
    sns-endpoint: http://127.0.0.1:4002
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
    packager: yarn
  serverless-iam-roles-per-function:
    defaultInherit: true # Each function will inherit the service level roles too.
  prune:
    automatic: true
    number: 3
  serverless-offline:
    httpPort: 3000
    stageVariables:
      foo: "bar"

plugins:
  - serverless-webpack
  - serverless-stack-termination-protection
  - serverless-iam-roles-per-function
  - serverless-prune-plugin
  - serverless-dynamodb-local
  - serverless-offline-sns
  - serverless-offline

package:
  individually: true


functions:
  #
  # L1 -> L2 messages, capture transactions from Ethereum
  #
  ReceiveMessage:
    timeout: 10
    memorySize: 128
    handler: src/functions/ethereum/blockNative.main
    environment:
      QUEUE_URL: !Ref EthereumTxQueue
    events:
      - http:
          method: POST
          path: /hook
          request:
            schema:
              application/json: ${file(src/functions/ethereum/schema_json.json)}
    # allow sending messages to EthereumTxQueue
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'sqs:SendMessage'
        Resource:
          - !GetAtt
            - EthereumTxQueue
            - Arn
  # send unique & valid messages to Terabethia Canister
  # ! do not rename ! 
  StoreMessage:
    timeout: 120
    memorySize: 128
    handler: src/functions/ethereum/store.main
    reservedConcurrency: 1
    environment:
      ETHEREUM_TABLE_NAME: !Ref EthereumTable
      # Ethereum Provider API URL (only for querying L1 state)
      ETHEREUM_PROVIDER_URL: ${ssm:${self:custom.resourcePrefix}EthereumProviderUrl~true}
      # AWS KMS Key ID, IC Operator
      KMS_KEY_ID: !Ref InternetComputerOperator
      # AWS KMS Public Key (base64 encoded), IC Operator
      KMS_PUBLIC_KEY: ${ssm:${self:custom.resourcePrefix}KMSPublicKeyIC~true}
      # Terabethia L1 Contract ID
      ETHEREUM_CONTRACT: ${ssm:${self:custom.resourcePrefix}EthereumContract}
      # Terabethia Canister ID
      CANISTER_ID: ${ssm:${self:custom.resourcePrefix}CanisterId}
      QUEUE_URL: !Ref EthereumTxQueue
    events:
      - sqs:
          arn: !GetAtt
            - EthereumTxQueue
            - Arn
          batchSize: 10
    iamRoleStatements:
      # allow removing processed messages from queue
      - Effect: 'Allow'
        Action:
            - 'sqs:DeleteMessage'
        Resource:
          - !GetAtt
            - EthereumTxQueue
            - Arn
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: 
          - !GetAtt 
            - EthereumTable  
            - Arn
      - Effect: 'Allow'
        Action:
            - 'kms:Sign'
        Resource:
          - !GetAtt
            - InternetComputerOperator
            - Arn

  #
  # L2 -> L1 messages
  #
  # grab messages from the IC and put them into FIFO StarknetQueue
  # ! do not rename ! 
  StarknetPollMessages:
    timeout: 45
    memorySize: 128
    handler: src/functions/sync/poll.main
    environment:
      # AWS KMS Key ID, IC Operator
      KMS_KEY_ID: !Ref InternetComputerOperator
      # AWS KMS Public Key (base64 encoded), IC Operator
      KMS_PUBLIC_KEY: ${ssm:${self:custom.resourcePrefix}KMSPublicKeyIC~true}
      CANISTER_ID: ${ssm:${self:custom.resourcePrefix}CanisterId~true}
      QUEUE_URL: !Ref StarknetMessagesQueue
      STARKNET_TABLE_NAME: !Ref StarknetTable
    events:
      # we poll messages every minute
      - schedule: rate(1 minute)
    iamRoleStatements:
      - Effect: 'Allow'        
        Action:
            - 'sqs:SendMessage'
        Resource:
          - !GetAtt
            - StarknetMessagesQueue
            - Arn
      - Effect: 'Allow'
        Action:
            - 'kms:Sign'
        Resource:
          - !GetAtt
            - InternetComputerOperator
            - Arn
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: 
          - !GetAtt 
            - StarknetTable  
            - Arn

  # send messages to L1 through Starknet
  StarknetSendMessages:
    timeout: 90
    memorySize: 258
    reservedConcurrency: 1
    handler: src/functions/sync/send.main
    environment:
      # Terabethia Signer Account contract
      STARKNET_ACCOUNT_ADDRESS: ${ssm:${self:custom.resourcePrefix}StarknetAccount}
      # Terabethia Signer PK encrypted by Bootstrap KMS
      STARKNET_PRIVATE_KEY: ${ssm:${self:custom.resourcePrefix}StarknetPrivateKey~true}
      # Terabethia Starknet Contract
      STARKNET_CONTRACT_ADDRESS: ${ssm:${self:custom.resourcePrefix}StarknetContract}
      QUEUE_URL: !Ref StarknetMessagesQueue
      # when transaction is submitted, we need to check for acceptance
      CHECK_QUEUE_URL: !Ref StarknetTransactionsQueue
      STARKNET_TABLE_NAME: !Ref StarknetTable
      KMS_KEY_ID: !Ref BootstrapKey # decrypt with BootstrapKey
    events:
      - sqs:
          arn: !GetAtt
            - StarknetMessagesQueue
            - Arn
          batchSize: 10
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
            - 'sqs:SendMessage'
        Resource:
          - !GetAtt
            - StarknetTransactionsQueue
            - Arn
      # allow removing processed messages from queue
      - Effect: 'Allow'
        Action:
            - 'sqs:DeleteMessage'
        Resource:
          - !GetAtt
            - StarknetMessagesQueue
            - Arn
      - Effect: 'Allow'
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: 
          - !GetAtt 
            - StarknetTable  
            - Arn
      - Effect: 'Allow'
        Action:
            - 'kms:Decrypt'
        Resource:
          - !GetAtt
            - BootstrapKey
            - Arn

  StarknetCheckTx:
    timeout: 120
    memorySize: 258
    reservedConcurrency: 1
    handler: src/functions/sync/check.main
    environment:
      QUEUE_URL: !Ref StarknetTransactionsQueue
      MESSAGES_QUEUE_URL: !Ref StarknetMessagesQueue
      # STARKNET_TABLE_NAME: !Ref StarknetTable
    events:
      - sqs:
          arn: !GetAtt
            - StarknetTransactionsQueue
            - Arn
          batchSize: 10
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
            - 'sqs:SendMessage'
        Resource:
          - !GetAtt
            - StarknetMessagesQueue
            - Arn
      # allow removing processed messages from queue
      - Effect: 'Allow'
        Action:
            - 'sqs:DeleteMessage'
        Resource:
          - !GetAtt
            - StarknetTransactionsQueue
            - Arn
      # - Effect: 'Allow'
      #   Action:
      #     - dynamodb:GetItem
      #     - dynamodb:PutItem
      #   Resource: 
      #     - !GetAtt 
      #       - StarknetTable  
      #       - Arn

  # Expose principal id of KMS key pair
  KMSPrincipal:
    timeout: 10
    memorySize: 128
    handler: src/functions/security/principal.main
    environment:
      KMS_KEY_ID: !Ref InternetComputerOperator
    events:
      - http:
          method: GET
          path: /principal
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
            - 'kms:GetPublicKey'
        Resource:
          - !GetAtt
            - InternetComputerOperator
            - Arn

  # Bootstrap Starknet
  SecretsBootstrap:
    timeout: 10
    memorySize: 128
    handler: src/functions/security/bootstrap.main
    environment:
      KMS_KEY_ID: !Ref BootstrapKey # encrypt with BootstrapKey
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
            - 'kms:Encrypt'
            - 'kms:Decrypt'
        Resource:
          - !GetAtt
            - BootstrapKey
            - Arn

resources:
  Resources:
    #
    # DynamoDB
    #
    # We use two different tables, so we can have a better access control
    # Prevent replays L1 -> L2
    EthereumTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        TableName: ${self:custom.resourcePrefix}Ethereum
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PrimaryKey
            AttributeType: S
        KeySchema:
          - AttributeName: PrimaryKey
            KeyType: HASH

    # Prevent replays L2 -> L1, allows tx lookup by message key
    StarknetTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        TableName: ${self:custom.resourcePrefix}Starknet
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PrimaryKey
            AttributeType: S
        KeySchema:
          - AttributeName: PrimaryKey
            KeyType: HASH

      
    #
    # SQS
    #
    EthereumTxQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.resourcePrefix}EthereumTxQueue.fifo
        ContentBasedDeduplication: true
        FifoQueue: true
        DelaySeconds: 30
        VisibilityTimeout: 300 # 5 minutes
        RedrivePolicy:
          maxReceiveCount: 3
          deadLetterTargetArn: !GetAtt
            - EthereumTxDLQ
            - Arn
    EthereumTxDLQ:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: ${self:custom.resourcePrefix}EthereumTxDLQ.fifo
        MessageRetentionPeriod: 1209600 # 14 days


    # Messages from the Terabethia canister are polled into this queue
    StarknetMessagesQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.resourcePrefix}StarknetMessages.fifo
        ContentBasedDeduplication: true
        FifoQueue: true
        VisibilityTimeout: 120 # 2 minutes
        RedrivePolicy:
          maxReceiveCount: 3
          deadLetterTargetArn: !GetAtt
            - StarknetMessagesDLQ
            - Arn
    
    StarknetMessagesDLQ:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: ${self:custom.resourcePrefix}StarknetMessagesDLQ.fifo
        MessageRetentionPeriod: 1209600 # 14 days

    # Starknet transactions are queued here, so we can check if the message was accepted on L2/L1
    # if the transaction fails, we need to replay it
    StarknetTransactionsQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.resourcePrefix}StarknetTransactionsQueue.fifo
        FifoQueue: true
        VisibilityTimeout: 300 # 5 minutes
        DelaySeconds: 120 # 2m delay
        RedrivePolicy:
          maxReceiveCount: 10 # we only retry if the tx was not processed yet
          deadLetterTargetArn: !GetAtt
            - StarknetTransactionsDLQ
            - Arn
    
    StarknetTransactionsDLQ:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: ${self:custom.resourcePrefix}StarknetTransactionsDLQ.fifo
        MessageRetentionPeriod: 1209600 # 14 days


    #
    # KMS
    #
    InternetComputerOperator:
      Type: AWS::KMS::Key
      Properties: 
        Description: Internet Computer Operator
        KeyPolicy:
          Id: default
          Statement:
          # we will delegate IAM policies instead of admin / users / roles
          # "The new key policy will not allow you to update the key policy in the future"
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            NotAction:
              - 'kms:Sign'
            Resource: '*'

          # signatures can be only made by StarknetPollMessages or StoreMessage lambda
          - Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:role/terabethia-${self:provider.stage}-StarknetPollMessages-${self:provider.region}-lambdaRole' 
                - !Sub 'arn:aws:iam::${AWS::AccountId}:role/terabethia-${self:provider.stage}-StoreMessage-${self:provider.region}-lambdaRole' 
            Action:
              - 'kms:Sign'
            Resource: '*'

        # secp256k elliptic curve
        KeySpec: ECC_SECG_P256K1
        # key is used only for sign/verify operations
        KeyUsage: SIGN_VERIFY
        # default settings
        # MultiRegion: false
        # PendingWindowInDays: 30
        # Enabled: true
        # EnableKeyRotation: false

    # we do not want to expose any raw private keys
    # so we bootstrap the key via lambda
    # and encrypt it with this KMS Key 
    BootstrapKey:
      Type: AWS::KMS::Key
      Properties: 
        Description: Encrypt/Decrypt Bootstrap Secret
        KeyPolicy:
          Id: default
          Statement:
          # we will delegate IAM policies instead of admin / users / roles
          # "The new key policy will not allow you to update the key policy in the future"
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            NotAction:
              - 'kms:Decrypt'
              - 'kms:Encrypt'
            Resource: '*'

          # allow encrypt only to SecretsBootstrap lambda
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/terabethia-${self:provider.stage}-SecretsBootstrap-${self:provider.region}-lambdaRole' 
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
            Resource: '*'

          # allow decrypt Starknet PK by specific lambda
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/terabethia-${self:provider.stage}-StarknetSendMessages-${self:provider.region}-lambdaRole' 
            Action:
              - 'kms:Decrypt'
            Resource: '*'
               
        KeySpec: RSA_4096
        # key is used only for sign/verify operations
        KeyUsage: ENCRYPT_DECRYPT
        # default settings
        # MultiRegion: false
        # PendingWindowInDays: 30
        # Enabled: true
        # EnableKeyRotation: false